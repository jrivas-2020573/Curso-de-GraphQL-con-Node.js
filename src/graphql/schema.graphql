    type Query {
        hello: String!
        getPerson(name: String, age: Int): String,
        getInt(age: Int!): Int
        getFloat(price: Float): Float
        getString: String
        getBoolean: Boolean
        getID: ID
        getNumbers(numbers: [Int!]!): [Int]
        #products 
        product(id: ID!): Product
        products: [Product!]!
        category(id: ID!): Category
    }

    type Mutation {
        login(email: EmailAddress!, password: String!): AuthResponse
        addProduct(dto: CreateProductDto!): Product
        updateProduct(id: ID!, dto: UpdateProductDto!): Product
        deleteProduct(id: ID!): ID
        addCategory(dto: CreateCategoryDto): Category
    }


    #Hola soy un comentario UwU

    type Product {
        id: ID!
        name: String!
        price: Float!
        description: String!
        image: String!
        createdAt: String!
        categoryId: ID!
        category: Category!
    }

    type Category {
        id: ID!
        name: String!
        image: String!
        products: [Product!]!
    }

    input CreateProductDto {
        name: String!
        price:  Int!
        description: String!
        image: String!
        categoryId: ID!
    }

    input UpdateProductDto {
        name: String
        price:  Int
        description: String
        image: URL
        categoryId: ID
    }

    type AuthResponse {
        access_token: String!
        user: User!
    }

    type User {
        id: ID!
        email: String!
        role: String!
        createdAt: String!
    }

    input CreateCategoryDto {
        name: CategoryNameType!
        image: URL!
    }

    scalar CategoryNameType